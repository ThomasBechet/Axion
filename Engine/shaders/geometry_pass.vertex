#version 420 core

layout(location = 0) in vec3 in_vertex;
layout(location = 1) in vec2 in_uv;
layout(location = 2) in vec3 in_normal;
layout(location = 3) in vec3 in_color;
layout(location = 4) in vec3 in_tangent;

uniform mat4 transform;

#define USE_CAMERA_UNIFORM_BLOCK 1
#if USE_CAMERA_UNIFORM_BLOCK

	#define CAMERA_BINDING_POINT 3

	layout(std140, binding = CAMERA_BINDING_POINT) uniform Camera
	{
		mat4 camera_view;
		mat4 camera_projection;
		mat4 inv_camera_view;
		mat4 inv_camera_projection;
	};

#endif

out vec2 UV;
out vec3 Normal;
out vec3 Color;
out mat3 TBN;

void main()
{
	//CPU SIDE
	gl_Position = camera_projection * camera_view * transform * vec4(in_vertex, 1.0f);

	UV = in_uv;
	
	//CPU SIDE
	Normal = mat3(camera_view) * normalize(mat3(transpose(inverse(transform))) * in_normal);

	Color = in_color;

	vec3 N = normalize(vec3(transform * vec4(in_normal, 0.0f)));
	vec3 T = normalize(vec3(transform * vec4(in_tangent, 0.0f)));
	vec3 B = cross(N, T);
	TBN = mat3(camera_view) * mat3(T, B, N);
}