#version $GLSL_VERSION

//CONSTANTS//
struct Constant
{
    uvec2 viewportResolution;
	uvec2 windowSize;
};
layout(std140, binding = $CONSTANTS_UBO_BINDING_POINT) uniform Constants
{
    Constant constants;
};

//CAMERA//
layout(std140, binding = $CAMERA_UBO_BINDING_POINT) uniform Camera
{
    mat4 camera_projection;
    mat4 camera_view;
    mat4 inv_camera_projection;
};

struct PointLight
{
    vec3 position;
    float radius;
    vec3 color;
    float intensity;
};
layout(std140, binding = $POINT_LIGHT_UBO_BINDING_POINT) uniform PointLights
{ 
    PointLight point_lights[$POINT_LIGHT_MAX_NUMBER];
    uint point_light_count;
};

layout(packed, binding = $CULL_POINT_LIGHT_SSBO_BINDING_POINT) writeonly buffer PointLightsCullIndices
{
    uint point_lights_cull_indices[];
};

shared vec4 frustum[4];
shared uint visibleLightCount = 0;
shared int visibleLightIndices[$CULL_POINT_LIGHT_MAX_PER_TILE];

layout(local_size_x = $CULL_TILE_SIZE, local_size_y = $CULL_TILE_SIZE, local_size_z = 1) in;
void main()
{
	//One thread compute frustum planes
	if(gl_LocalInvocationIndex == 0)
	{
		vec2 tileScale = vec2(constants.viewportResolution * (1.0f / float(2 * $CULL_TILE_SIZE)));
		vec2 tileBias = tileScale - vec2(gl_WorkGroupID.xy);

		vec4 col1 = vec4(-camera_projection[0][0] * tileScale.x, camera_projection[0][1], tileBias.x, camera_projection[0][3]);
		vec4 col2 = vec4(camera_projection[1][0], -camera_projection[1][1] * tileScale.y, tileBias.y, camera_projection[1][3]);
		vec4 col4 = vec4(camera_projection[3][0], camera_projection[3][1], -1.0f, camera_projection[3][3]);

		frustum[0] = col4 + col1;
    	frustum[1] = col4 - col1;
    	frustum[2] = col4 - col2;
    	frustum[3] = col4 + col2;
		for(int i = 0; i < 4; i++)
		{
			frustum[i] *= 1.0f / length(frustum[i].xyz);
		}
	}

	barrier();

	uint threadCount = $CULL_TILE_SIZE * $CULL_TILE_SIZE;
    uint passCount = (point_light_count + threadCount - 1) / threadCount;
	for(uint passIt = 0; passIt < passCount; passIt++)
	{
		uint lightIndex =  passIt * threadCount + gl_LocalInvocationIndex;

		vec4 position = vec4(point_lights[lightIndex].position, 1.0f); //view space
		float radius = point_lights[lightIndex].radius;

		if(lightIndex < point_light_count) //Check max light per tile
		{
			bool inFrustum = true;
			for(int i = 3; i >= 0 && inFrustum; i--)
			{
				float dist = dot(frustum[i], position);
				inFrustum = (-radius <= dist);
			}

			if(inFrustum)
			{
				uint offset = atomicAdd(visibleLightCount, 1);
				visibleLightIndices[offset] = int(lightIndex);
			}
		}
	}

	barrier();

	// One thread should fill the global light buffer
	if(gl_LocalInvocationIndex == 0) 
	{
		uint index = gl_WorkGroupID.y * gl_NumWorkGroups.x + gl_WorkGroupID.x;
		uint offset = index * $CULL_POINT_LIGHT_MAX_PER_TILE;
		point_lights_cull_indices[offset] = visibleLightCount;
		for(uint i = 0; i < visibleLightCount; i++)
		{
			point_lights_cull_indices[offset + i + 1] = visibleLightIndices[i];
		}
	}
}