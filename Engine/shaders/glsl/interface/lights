//POINT LIGHTS//
struct PointLight 
{
    vec3 position;
    float radius;
    vec3 color;
    float intensity;
};
layout(std140, binding = $POINT_LIGHT_UBO_BINDING_POINT) uniform PointLights
{ 
    PointLight point_lights[$POINT_LIGHT_MAX_NUMBER];
    uint point_light_count;
};

#if ($USE_LIGHT_CULLING == 1)
    layout(packed, binding = $CULL_POINT_LIGHT_SSBO_BINDING_POINT) readonly buffer PointLightsCullIndices
    {
        uint point_lights_cull_indices[];
    };

    uint getCullKey()
    {
        ivec2 tileID = ivec2(gl_FragCoord.xy) / $CULL_TILE_SIZE;
        return (tileID.y * (constants.resolution.x / $CULL_TILE_SIZE) + tileID.x) * $CULL_POINT_LIGHT_MAX_PER_TILE;
    }
    PointLight getCullPointLight(uint index, uint cullKey)
    {
        return point_lights[point_lights_cull_indices[cullKey + index + 1]];
    }
    uint getCullPointLightCount(uint cullKey)
    {
        return point_lights_cull_indices[cullKey];
    }
#else
    uint getPointLightCount()
    {
        return point_light_count;
    }
    PointLight getPointLight(uint index)
    {
        return point_lights[index];
    }
#endif

//DIRECTIONAL LIGHTS//
struct DirectionalLight
{
    vec3 direction;
    float pad;
    vec3 color;
    float intensity;
};
layout(std140, binding = $DIRECTIONAL_LIGHT_UBO_BINDING_POINT) uniform DirectionalLights
{
    DirectionalLight directional_lights[$DIRECTIONAL_LIGHT_MAX_NUMBER];
    uint directional_lights_count;
};

uint getDirectionalLightCount()
{
    return directional_lights_count;
}
DirectionalLight getDirectionalLight(uint index)
{
    return directional_lights[index];
}