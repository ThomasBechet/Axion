#version 420 core

layout(location = 0) out vec3 out_color;

uniform sampler2D gbuffer_albedo;
uniform sampler2D gbuffer_normal;
uniform sampler2D gbuffer_position;

in vec2 UV;

#define USE_POINTLIGHT_UNIFORM_BLOCK 1 
#if USE_POINTLIGHT_UNIFORM_BLOCK

	#define POINTLIGHT_MAX_NUMBER 50
	#define POINTLIGHT_BINDING_POINT 2

	struct PointLight
	{
		vec4 color;
		float radius;
		float intensity;
	};
	layout(std140, binding = POINTLIGHT_BINDING_POINT) uniform PointLights
	{
		PointLight point_lights[POINTLIGHT_MAX_NUMBER];	
	};

	uniform uint pointlight_index;
	uniform vec3 pointlight_position;
#endif

void main()
{
	//out_color = vec4(1.0f, 0.0f, 0.0f, 1.0f);
	out_color = texture2D(gbuffer_albedo, UV).xyz;
}