#version 420 core

layout(location = 0) out vec3 out_color;

layout(binding = 0) uniform sampler2D gbuffer_albedo_specular;
layout(binding = 1) uniform sampler2D gbuffer_normal_depth;

in vec2 UV;

#define USE_POINTLIGHT_UNIFORM_BLOCK 1 
#if USE_POINTLIGHT_UNIFORM_BLOCK

	#define POINTLIGHT_MAX_NUMBER 50
	#define POINTLIGHT_BINDING_POINT 2

	struct PointLight
	{
		vec4 color;
		float radius;
		float intensity;
	};
	layout(std140, binding = POINTLIGHT_BINDING_POINT) uniform PointLights
	{
		PointLight point_lights[POINTLIGHT_MAX_NUMBER];	
	};

	uniform uint pointlight_index;
	uniform vec3 pointlight_position;
#endif

void main()
{
	vec3 albedo = texture2D(gbuffer_albedo_specular, UV).rgb;
	vec3 normal = texture2D(gbuffer_normal_depth, UV).rgb;
	
	vec3 fragPos = texture2D(gbuffer_position, UV).xyz;

	vec3 lightPos = vec3(4.0f, 4.0f, 0.0f);
	float ambientStrength = 0.0f;

	vec3 n = normalize(normal);
	vec3 l = normalize(lightPos - fragPos);

	float diffuse = max(dot(n, l), 0.0f);
	vec4 ambient = albedo * ambientStrength;

	vec4 color = (diffuse * albedo) + ambient;
	out_color = color.xyz;
}