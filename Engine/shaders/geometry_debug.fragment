#version 420 core

layout(binding = 0) uniform sampler2D gbuffer_albedo;
layout(binding = 1) uniform sampler2D gbuffer_normal;
layout(binding = 2) uniform sampler2D gbuffer_position;
layout(binding = 3) uniform sampler2D gbuffer_depth;

in vec2 UV;
out vec4 out_color;

#define ZNEAR 0.01
#define ZFAR 100.0

vec4 albedo(in vec2 uv)
{
	return vec4(texture(gbuffer_albedo, uv).xyz, 1.0f);
}
vec4 normal(in vec2 uv)
{
	return vec4((texture(gbuffer_normal, uv).xyz + 1.0 / 2.0), 1.0f);
}
vec4 position(in vec2 uv)
{
	return vec4(texture(gbuffer_position, uv).xyz, 1.0f);
}
vec4 depth(in vec2 uv)
{
	float depth = texture2D(gbuffer_depth, uv).x;
	return vec4((2.0 * ZNEAR) / (ZFAR + ZNEAR - depth * (ZFAR - ZNEAR)));
}

void main()
{
	out_color = vec4(0.0f, 0.0f, 0.0f, 1.0f);
	
	if(UV.x < 0.5)
		if(UV.y < 0.5)
			out_color = position(UV * 2.0);
		else
			out_color = albedo(vec2(UV.x * 2.0, (UV.y - 0.5) * 2.0));
	else
		if(UV.y < 0.5)
			out_color = depth(vec2((UV.x - 0.5) * 2.0, UV.y * 2.0));
		else
			out_color = normal((UV - 0.5) * 2.0);
}